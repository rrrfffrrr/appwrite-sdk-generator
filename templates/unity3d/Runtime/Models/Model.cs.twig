{% macro sub_schema(property) %}{% if property.sub_schema %}{% if property.type == 'array' %}List<{{property.sub_schema | caseUcfirst | overrideIdentifier}}>{% else %}{{property.sub_schema | caseUcfirst | overrideIdentifier}}{% endif %}{% else %}{{property | typeName}}{% endif %}{% endmacro %}
{% macro property_name(definition, property) %}{{ property.name | caseUcfirst | removeDollarSign | escapeKeyword}}{% endmacro %}

using System;
using System.Linq;
using System.Collections.Generic;

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace {{ spec.title | caseUcfirst }}.Models
{
    public class {{ definition.name | caseUcfirst | overrideIdentifier }}
    {
        {%~ for property in definition.properties %}
        [JsonProperty("{{ property.name }}")]
        public {{ _self.sub_schema(property) }} {{ _self.property_name(definition, property) }} { get; private set; }

        {%~ endfor %}
        {%~ if definition.additionalProperties %}
        public Dictionary<string, object> Data { get; private set; }

        {%~ endif %}
        public {{ definition.name | caseUcfirst | overrideIdentifier }}(
            {%~ for property in definition.properties|sort((a, b) => b.required <=> a.required) %}
            {{ _self.sub_schema(property) }} {{ property.name | caseCamel | escapeKeyword }}{% if not property.required %} = default{% endif %}{% if not loop.last or (loop.last and definition.additionalProperties) %},{% endif %}

            {%~ endfor %}
            {%~ if definition.additionalProperties %}
            Dictionary<string, object> data
            {%~ endif %}
        ) {
            {%~ for property in definition.properties %}
            {{ _self.property_name(definition, property) }} = {{ property.name | caseCamel | escapeKeyword }};
            {%~ endfor %}
            {%~ if definition.additionalProperties %}
            Data = data;
            {%~ endif %}
        }

        {%~ if definition.additionalProperties %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            fromJson.Invoke(Data);
        {%~ endif %}
        {%~ for property in definition.properties %}
        {%~ if property.sub_schema %}
        {%~ for def in spec.definitions %}
        {%~ if def.name == property.sub_schema and def.additionalProperties and property.type == 'array' %}

        public T ConvertTo<T>(Func<Dictionary<string, object>, T> fromJson) =>
            (T){{ property.name | caseUcfirst | escapeKeyword }}.Select(it => it.ConvertTo(fromJson));

        {%~ endif %}
        {%~ endfor %}
        {%~ endif %}
        {%~ endfor %}
    }
}